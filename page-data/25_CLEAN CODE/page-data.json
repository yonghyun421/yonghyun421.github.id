{
    "componentChunkName": "component---src-templates-post-template-tsx",
    "path": "/25_CLEAN CODE/",
    "result": {"data":{"allMarkdownRemark":{"edges":[{"node":{"html":"<p><img src=\"https://images.velog.io/images/4_21ee/post/93790263-5b2a-43af-9903-b953de9cdabe/clean-code-logo.png\" alt=\"\"></p>\n<h2>실무에서 클린코드의 의의</h2>\n<h3>코드 파악, 디버깅 , 리뷰 => 유지보수 시간의 단축💥</h3>\n<p>시간 = 자원 = 돈</p>\n<p>처음엔 클린했지만 기존 코드에 기능을 추가하는 상황이라면? 자칫 잘못하면 지뢰코드를 만들어 버릴 수 있다.</p>\n<h4>지뢰코드란?</h4>\n<p>흐름 파악이 어렵고 도메인 맥락 표현이 안 되어 동료에게 물어봐야 알 수 있는 코드</p>\n<h3>안일한 코드 추가의 함정</h3>\n<p>원하는 로직을 빠르게 찾으려면?</p>\n<h4>하나의 목적인 코드가 흩뿌려져 있다 => 응집도를 높이자</h4>\n<h4>하나의 함수가 여러 가지 일을 하고 있다. => 단일책임으로!</h4>\n<h4>함수의 세부 구현 단계가 제각각이다. => 추상화!</h4>\n<h2>클린 코드 == 로직을 빠르게 찾을 수 있는 코드</h2>\n<h3>1. 응집도 - 같은 목적의 코드는 뭉쳐두자</h3>\n<p>흩뿌려져 있는 코드는 파악도 한 번에 안되고 버그 발생 위험도 높다.</p>\n<p><strong>but 무조건 뭉치기만 한다면?</strong>\n=> 오히려 어려워진 코드파악. 커스텀훅의 안티패턴</p>\n<h4>무엇을 뭉쳐야 하는가?</h4>\n<p><strong>뭉치면 쾌적</strong> => 당장 몰라도 되는 디테일\n<strong>뭉치면 답답</strong> => 코드 파악에 필수적인 핵심 정보</p>\n<h3>클린 코드 != 짧은 코드</h3>\n<h3>클린 코드 == 찾고 싶은 로직을 빠르게 찾을 수 있는 코드</h3>\n<h4>코드 응집 Tip : 핵심 데이터와 세부 구현 나누기</h4>\n<p>=> 핵심 데이터는 밖에서 전달, 나머지는 뭉친다.</p>\n<h4>선언적 프로그래밍</h4>\n<ul>\n<li>핵심 데이터만 전달받고 세부 구현은 뭉쳐 숨겨 두는 개발 스타일</li>\n<li>특징 : 무엇을 하는 함수인지 빠르게 이해가 가능하다는 것\n세부 구현은 안쪽에 뭉쳐두어서 신경 쓸 필요가 없다는 것\n그리고 무엇만 바꿔서 쉽게 재사용할 수 있다는 점</li>\n</ul>\n<h4>뭉치지 않았다면? 명령형 프로그래밍</h4>\n<p>어떻게 해야 할지 하나하나 명령하기\n읽는데 오래걸리고 재사용하기 어렵다는 단점</p>\n<h4>선언적인 코드가 무조건 좋은가?</h4>\n<p><strong>No.</strong> 두 방법 모두 유동적으로 사용하여야 한다.</p>\n<h3>2. 단일책임 - 하나의 일을 하는 뚜렷한 이름의 함수를 만들자</h3>\n<p>중요 포인트가 모두 담겨 있지 않은 함수명 => 위험\n기능 추가 시 함수는 더욱 잡탕이 되어버린다.\n이러한 기능 추가가 반복될 시 지뢰코드가 되어버린다.</p>\n<h4>리팩토링 Tip</h4>\n<ol>\n<li>한 가지 일만 하는, 명확한 이름의 함수</li>\n<li>한 가지 일만 하는, 기능성 컴포넌트</li>\n<li>조건이 많아지면 한글 이름도 유용</li>\n</ol>\n<h3>3. 추상화 - 핵심 개념을 뽑아내자</h3>\n<p>프론트엔드 코드의 추상화 : 컴포넌트, 함수</p>\n<h4>얼마나 추상화할 것인가?</h4>\n<p><strong>답은 없다.</strong> 상황에 따라 필요한 만큼 추상화하면 된다.</p>\n<p>추상화 수준이 섞여 있으면 코드 파악이 어렵다.\n=> 한 레벨의 코드 안에 추상화 수준이 섞여 있으면 코드 파악이 어렵다. 추상화 단계를 비슷하게 정리 추상화 수준이 높은 것끼리, 또 낮은 것끼리 모은다.</p>\n<h3>4. 액션 아이템</h3>\n<h4>1. 담대하게 기존 코드 수정하기</h4>\n<p>두려워하지 말고 기존 코드를 씹고 뜯고 맛보고 즐기자</p>\n<h4>2. 큰 그림 보는 연습하기</h4>\n<p>그 때는 맞고 지금은 틀리다. 기능 추가 자체는 클린해도, 전체적으로는 어지러울 수 있다.</p>\n<h4>3. 팀과 함께 공감대 형성하기</h4>\n<p>코드에 정답은 없다. 명시적으로 이야기를 하는 시간이 필요하다.</p>\n<h4>4. 문서로 적어 보기</h4>\n<p>글로 적어야 명확해진다.\n향후 어떤점에서 위험할 수 있는지? 어떻게 개선할 수 있는지?</p>\n<blockquote>\n<p><strong>토스ㅣSLASH 21 - 실무에서 바로 쓰는 Frontend Clean Code</strong>\n<a href=\"https://youtu.be/edWbHp_k_9Y\" target=\"_blank\" rel=\"nofollow\">https://youtu.be/edWbHp_k_9Y</a></p>\n</blockquote>\n<hr>\n<p>개발을 시작한지 얼마 되지 않은 나에게 어떻게 보면 먼 얘기처럼 들릴 수 있는 이야기이지만 내가 목표로 하는 함께 일하고 싶은 개발자, 좋은 코드를 만들고 싶은 개발자가 되기 위해서는 절대 놓칠 수 없는 내용이기에 기록해두고 두고두고 보려고 한다💥💥💥</p>","frontmatter":{"title":"CLEAN CODE","summary":"좋은 코드를 만들고 싶습니다","date":"2021.11.06.","categories":["React","TIL","CLEANCODE"],"thumbnail":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#081838","images":{"fallback":{"src":"/static/526762b3b0608a9d02067a9bd31618bf/1231c/clean-code.png","srcSet":"/static/526762b3b0608a9d02067a9bd31618bf/80e4a/clean-code.png 148w,\n/static/526762b3b0608a9d02067a9bd31618bf/9006d/clean-code.png 295w,\n/static/526762b3b0608a9d02067a9bd31618bf/1231c/clean-code.png 590w","sizes":"(min-width: 590px) 590px, 100vw"},"sources":[{"srcSet":"/static/526762b3b0608a9d02067a9bd31618bf/be3c6/clean-code.webp 148w,\n/static/526762b3b0608a9d02067a9bd31618bf/f905f/clean-code.webp 295w,\n/static/526762b3b0608a9d02067a9bd31618bf/cf0aa/clean-code.webp 590w","type":"image/webp","sizes":"(min-width: 590px) 590px, 100vw"}]},"width":590,"height":332}},"publicURL":"/static/526762b3b0608a9d02067a9bd31618bf/clean-code.png"}}}}]}},"pageContext":{"slug":"/25_CLEAN CODE/"}},
    "staticQueryHashes": []}