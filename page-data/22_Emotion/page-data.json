{
    "componentChunkName": "component---src-templates-post-template-tsx",
    "path": "/22_Emotion/",
    "result": {"data":{"allMarkdownRemark":{"edges":[{"node":{"html":"<p><img src=\"https://images.velog.io/images/4_21ee/post/ff33b336-9a19-4a0e-b96c-32d2dea90520/emotion.png\" alt=\"\">\n<code class=\"language-text\">CSS</code> 배울때만 해도 아무것도 몰랐고 <code class=\"language-text\">Sass</code>라는걸 알고나서 엄청나다고 생각했더니 <code class=\"language-text\">Styled-components</code>라는게 또 있었고 이제 조금 익숙해지려고 했더니 이번엔 <code class=\"language-text\">Emotion</code>이다. 다음엔 어떤게 기다리고 있을지 기대하며 <strong>Emotion이 뭔지 맛좀 보겠습니다..?</strong></p>\n<h1>Emotion.js란?</h1>\n<p>Emotion.js는 CSS-in-JS의 종류 중 하나로 JavaScript 안에서 스타일을 작성할 수 있게 해준다.\nemotion.js는 주로 프레임워크와 관련없이 사용하는 <code class=\"language-text\">Framework Agnostic</code>과 <code class=\"language-text\">React</code> 두 가지 방식으로 사용된다.</p>\n<h2>emotion.js 설치</h2>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># Framework Agnostic</span>\n$ <span class=\"token function\">npm</span> <span class=\"token function\">install</span> @emotion/css\n\n<span class=\"token comment\"># React</span>\n$ <span class=\"token function\">npm</span> <span class=\"token function\">install</span> @emotion/react</code></pre></div>\n<h2>import 하기</h2>\n<p>emotion.js를 사용해야 할 컴포넌트에 먼저 import를 해야한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/** @jsxImportSource @emotion/react */</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> jsx<span class=\"token punctuation\">,</span> css <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@emotion/react'</span></code></pre></div>\n<p>여기서 <code class=\"language-text\">/** @jsxImportSource @emotion/react */</code>는 babel에게 <code class=\"language-text\">React.createElement</code> 대신 jsx를 jsx라는 함수로 변환하라는 뜻이기 때문에 단순히 주석이라고 생각해서 쓰지 않는다면 <code class=\"language-text\">@emotion/react</code>가 적용되지 않는다.</p>\n<h2>기본 구조</h2>\n<p>공식 문서에 있는 예문으로 emotion의 기본 구조 <code class=\"language-text\">styled-components</code>와 비교해서 살펴보자.</p>\n<h3>emotion.js</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/** @jsxImportSource @emotion/react */</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> css<span class=\"token punctuation\">,</span> jsx <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@emotion/react'</span>\n\n<span class=\"token keyword\">const</span> divStyle <span class=\"token operator\">=</span> css<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  background-color: hotpink;\n  font-size: 24px;\n  border-radius: 4px;\n  padding: 32px;\n  text-align: center;\n  &amp;:hover {\n    color: white;\n  }\n</span><span class=\"token template-punctuation string\">`</span></span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>div css<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>divStyle<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>Hover to change color<span class=\"token punctuation\">.</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<h3>styled-components</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> styled <span class=\"token keyword\">from</span> <span class=\"token string\">'styled-components'</span>\n\n<span class=\"token keyword\">const</span> DivStyle <span class=\"token operator\">=</span> styled<span class=\"token punctuation\">.</span>div<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  background-color: hotpink;\n  font-size: 24px;\n  border-radius: 4px;\n  padding: 32px;\n  text-align: center;\n  &amp;:hover {\n    color: white;\n  }\n</span><span class=\"token template-punctuation string\">`</span></span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>DivStyle<span class=\"token operator\">></span>Hover to change color<span class=\"token punctuation\">.</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>DivStyle<span class=\"token operator\">></span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이렇게 보면 크게 다른 점은 없지만 jsx 안에서 이게 어떤 태그인지 바로 알 수 있다는 장점이 있다.\n만약 emotion.js를 styled-components처럼 사용하고 싶다면 @emotion/styled를 설치하면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> <span class=\"token function\">install</span> @emotion/styled @emotion/react</code></pre></div>\n<p>이렇게 하면</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> styled <span class=\"token keyword\">from</span> <span class=\"token string\">'@emotion/styled'</span>\n\n<span class=\"token keyword\">const</span> DivStyle <span class=\"token operator\">=</span> styled<span class=\"token punctuation\">.</span>div<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  background-color: hotpink;\n  font-size: 24px;\n  border-radius: 4px;\n  padding: 32px;\n  text-align: center;\n  &amp;:hover {\n    color: white;\n  }\n</span><span class=\"token template-punctuation string\">`</span></span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>DivStyle<span class=\"token operator\">></span>Hover to change color<span class=\"token punctuation\">.</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>DivStyle<span class=\"token operator\">></span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이처럼 styled-components를 사용하는 것처럼 emotion을 사용할 수 있다.</p>\n<h2>재사용</h2>\n<p>emotion 역시 styled-components와 마찬가지로 스타일을 입힌 것을 component로 만들어서 어느 곳에서든 재사용할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/** @jsxImportSource @emotion/react */</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">P</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">props</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>p\n    css<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">margin</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">fontSize</span><span class=\"token operator\">:</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">lineHeight</span><span class=\"token operator\">:</span> <span class=\"token string\">'1.5'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">fontFamily</span><span class=\"token operator\">:</span> <span class=\"token string\">'sans-serif'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">color</span><span class=\"token operator\">:</span> <span class=\"token string\">'blue'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>props<span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">ArticleText</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">props</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span><span class=\"token constant\">P</span>\n    css<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">fontSize</span><span class=\"token operator\">:</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">fontFamily</span><span class=\"token operator\">:</span> <span class=\"token string\">'Georgia, serif'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">color</span><span class=\"token operator\">:</span> <span class=\"token string\">'darkgray'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>props<span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token constant\">P</span><span class=\"token operator\">></span>Using <span class=\"token constant\">P</span> component<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token constant\">P</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>ArticleText<span class=\"token operator\">></span>Using ArticleText component<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ArticleText<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>같은 CSS 속성이 있다면 가장 최근 값으로 적용된다.</p>\n<h2>Nested</h2>\n<p>emotion.js에서도 Nested 사용이 가능하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/** @jsxImportSource @emotion/react */</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> jsx<span class=\"token punctuation\">,</span> css <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@emotion/react'</span>\n\n<span class=\"token keyword\">const</span> paragraph <span class=\"token operator\">=</span> css<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  color: turquoise;\n\n  a {\n    border-bottom: 1px solid red;\n    cursor: pointer;\n  }\n</span><span class=\"token template-punctuation string\">`</span></span>\n<span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>p css<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>paragraph<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n    Some text<span class=\"token punctuation\">.</span>\n    <span class=\"token operator\">&lt;</span>a<span class=\"token operator\">></span><span class=\"token constant\">A</span> link <span class=\"token keyword\">with</span> a bottom border<span class=\"token punctuation\">.</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>a<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<h2>MediaQuery</h2>\n<p>반응형은 일반적으로 사용하는 미디어쿼리와 동일하게 사용할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/** @jsxImportSource @emotion/react */</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> jsx<span class=\"token punctuation\">,</span> css <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@emotion/react'</span>\n\n<span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>p\n    css<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>css<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n      font-size: 30px;\n      @media (min-width: 420px) {\n        font-size: 50px;\n      }\n    </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">></span>\n    Some text<span class=\"token operator\">!</span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<h2>Global Theme 설정</h2>\n<p>styled-components와 유사한 방법으로 Global Theme를 설정할 수 있다.</p>\n<h3>GlobalStyle.js</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Global<span class=\"token punctuation\">,</span> css <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@emotion/react'</span>\n\n<span class=\"token keyword\">const</span> style <span class=\"token operator\">=</span> css<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  * {\n    margin: 0;\n    padding: 0;\n  }\n\n  body {\n    box-sizing: border-box;\n  }\n</span><span class=\"token template-punctuation string\">`</span></span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">GlobalStyle</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>Global styles<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>style<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> GlobalStyle</code></pre></div>\n<h3>theme.js</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> size <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">largest</span><span class=\"token operator\">:</span> <span class=\"token string\">'75em'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 1200px</span>\n  <span class=\"token literal-property property\">large</span><span class=\"token operator\">:</span> <span class=\"token string\">'56.25em'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 900px</span>\n  <span class=\"token literal-property property\">medium</span><span class=\"token operator\">:</span> <span class=\"token string\">'37.5em'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 600px</span>\n  <span class=\"token literal-property property\">small</span><span class=\"token operator\">:</span> <span class=\"token string\">'31.25em'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 500px</span>\n  <span class=\"token literal-property property\">smallest</span><span class=\"token operator\">:</span> <span class=\"token string\">'25em'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 400px</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> theme <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">mainColor</span><span class=\"token operator\">:</span> <span class=\"token string\">'#0000ff'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">mq</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">laptop</span><span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">@media only screen and (min-width: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>size<span class=\"token punctuation\">.</span>largest<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">)</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">tablet</span><span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">@media only screen and (min-width: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>size<span class=\"token punctuation\">.</span>large<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">)</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">mobile</span><span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">@media only screen and (min-width: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>size<span class=\"token punctuation\">.</span>small<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">)</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> theme</code></pre></div>\n<h3>index.js</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> ReactDOM <span class=\"token keyword\">from</span> <span class=\"token string\">'react-dom'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> BrowserRouter <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-router-dom'</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> ThemeProvider <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@emotion/react'</span>\n<span class=\"token keyword\">import</span> theme <span class=\"token keyword\">from</span> <span class=\"token string\">'@styles/theme'</span> <span class=\"token comment\">// 위치한 경로 설정</span>\n<span class=\"token keyword\">import</span> GlobalStyle <span class=\"token keyword\">from</span> <span class=\"token string\">'@styles/global'</span> <span class=\"token comment\">// 위치한 경로 설정</span>\n\n<span class=\"token keyword\">import</span> App <span class=\"token keyword\">from</span> <span class=\"token string\">'./App'</span>\n\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>BrowserRouter<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>ThemeProvider theme<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>theme<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>GlobalStyle <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>App <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ThemeProvider<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>BrowserRouter<span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<h2>Emotion.js의 장점</h2>\n<ul>\n<li>CSS-in-JS 형식으로 스타일을 사용할 수 있다.</li>\n<li>className이 자동으로 부여되기 때문에 스타일이 겹칠 염려가 없다.</li>\n<li>재사용이 가능하다.</li>\n<li>porps, 조건 등에 따라 스타일을 지정할 수 있다.</li>\n<li>vendor-prefixing, nested selectors, mediaqueries 등을 적용할 수 있어 작성이 간편하다.</li>\n<li>styled-component 사용방식과 css prop 기능을 지원하여 확장에 용이하다.</li>\n<li>styled-component 보다 파일 사이즈가 작고, ssr시 서버 작업이 필요없다.</li>\n</ul>\n<h3>결론</h3>\n<p>간단하고 효율적이며 복잡하지 않은 스타일링을 위해 크기가 작은 Emotion은 훌륭한 CSS-in-JS 라이브러리이다. 하지만 독특하고 복잡한 스타일 옵션의 경우 styled-components가 더 나은 방법이 될 수도 있다.\n<img src=\"https://images.velog.io/images/4_21ee/post/447e7318-c904-49af-9d98-736e2019ed9c/image.png\" alt=\"\">\n박빙이다…🙄</p>","frontmatter":{"title":"Emotion이요?","summary":"🐮🐱","date":"2021.11.13.","categories":["CSS","TIL","Javascript","emotion"],"thumbnail":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#486878","images":{"fallback":{"src":"/static/0e7e92d52632a4f5ca8b8f0a7cbb25ed/6fd42/emotion.png","srcSet":"/static/0e7e92d52632a4f5ca8b8f0a7cbb25ed/0df75/emotion.png 130w,\n/static/0e7e92d52632a4f5ca8b8f0a7cbb25ed/a1340/emotion.png 260w,\n/static/0e7e92d52632a4f5ca8b8f0a7cbb25ed/6fd42/emotion.png 520w","sizes":"(min-width: 520px) 520px, 100vw"},"sources":[{"srcSet":"/static/0e7e92d52632a4f5ca8b8f0a7cbb25ed/9940e/emotion.webp 130w,\n/static/0e7e92d52632a4f5ca8b8f0a7cbb25ed/60a7e/emotion.webp 260w,\n/static/0e7e92d52632a4f5ca8b8f0a7cbb25ed/b49b2/emotion.webp 520w","type":"image/webp","sizes":"(min-width: 520px) 520px, 100vw"}]},"width":520,"height":260}},"publicURL":"/static/0e7e92d52632a4f5ca8b8f0a7cbb25ed/emotion.png"}}}}]}},"pageContext":{"slug":"/22_Emotion/"}},
    "staticQueryHashes": []}